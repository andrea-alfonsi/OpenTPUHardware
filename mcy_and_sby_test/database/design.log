
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2024  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.44+60 (git sha1 0fc5812dc, aarch64-linux-gnu-g++ 11.4.0-1ubuntu1~22.04 -fPIC -O3)

-- Executing script file `database/design.ys' --

1. Executing Verilog-2005 frontend: design.sv
Parsing SystemVerilog input from `design.sv' to AST representation.
Storing AST representation for module `$abstract\dut'.
Successfully finished Verilog frontend.

2. Executing PREP pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\dut'.
Generating RTLIL representation for module `\dut'.

2.2.1. Analyzing design hierarchy..
Top module:  \dut

2.2.2. Analyzing design hierarchy..
Top module:  \dut
Removing unused module `$abstract\dut'.
Removed 1 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

2.3.4. Executing PROC_INIT pass (extract init attributes).

2.3.5. Executing PROC_ARST pass (detect async resets in processes).

2.3.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

2.3.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

2.3.8. Executing PROC_DLATCH pass (convert process syncs to latches).

2.3.9. Executing PROC_DFF pass (convert process syncs to FFs).

2.3.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.3.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module dut.

2.4. Executing FUTURE pass.

2.5. Executing OPT_EXPR pass (perform const folding).
Optimizing module dut.

2.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dut..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.7. Executing CHECK pass (checking for obvious problems).
Checking module dut...
Found and reported 0 problems.

2.8. Executing OPT pass (performing simple optimizations).

2.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dut.

2.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dut'.
Removed a total of 0 cells.

2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dut..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dut.
Performed a total of 0 changes.

2.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dut'.
Removed a total of 0 cells.

2.8.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dut..

2.8.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module dut.

2.8.8. Finished OPT passes. (There is nothing left to do.)

2.9. Executing WREDUCE pass (reducing word size of cells).

2.10. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dut..

2.11. Executing MEMORY_COLLECT pass (generating $mem cells).

2.12. Executing OPT pass (performing simple optimizations).

2.12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dut.

2.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dut'.
Removed a total of 0 cells.

2.12.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dut..

2.12.4. Finished fast OPT passes.

2.13. Printing statistics.

=== dut ===

   Number of wires:                  3
   Number of wire bits:              3
   Number of public wires:           3
   Number of public wire bits:       3
   Number of ports:                  3
   Number of port bits:              3
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $xor                            1

2.14. Executing CHECK pass (checking for obvious problems).
Checking module dut...
Found and reported 0 problems.

3. Executing RTLIL backend.
Output filename: database/design.il

End of script. Logfile hash: 93843b131e, CPU: user 0.01s system 0.00s, MEM: 15.62 MB peak
Yosys 0.44+60 (git sha1 0fc5812dc, aarch64-linux-gnu-g++ 11.4.0-1ubuntu1~22.04 -fPIC -O3)
Time spent: 36% 5x opt_expr (0 sec), 25% 4x opt_clean (0 sec), ...
